#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
"""
Time:
Author:
Description: Host table operation
"""
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import func

from aops_utils.log.log import LOGGER
from aops_utils.database.helper import judge_return_code
from aops_utils.database.proxy import MysqlProxy
from aops_utils.restful.status import DATABASE_DELETE_ERROR, DATABASE_INSERT_ERROR, NO_DATA, \
    DATABASE_QUERY_ERROR, DATABASE_UPDATE_ERROR, DATA_EXIST, SUCCEED, DATA_DEPENDENCY_ERROR
from aops_utils.database.table import Host
from cve_manager.database.table import Repo


class RepoProxy(MysqlProxy):
    """
    Repo related table operation
    """

    def import_repo(self, data):
        """
        Import repo

        Args:
            data(dict): parameter, e.g.
                {
                    "username": "admin",
                    "repo_name": "20.03-update",
                    "repo_data": ""
                }

        Returns:
            int: status code
        """
        try:
            status_code = self._insert_repo(data)
            self.session.commit()
            LOGGER.debug("Finished inserting new repo.")
            return status_code
        except SQLAlchemyError as error:
            self.session.rollback()
            LOGGER.error(error)
            LOGGER.error("Insert new repo failed due to internal error.")
            return DATABASE_INSERT_ERROR

    def _insert_repo(self, data):
        """
        insert a repo into database
        Args:
            data (dict): repo info

        Returns:

        """
        repo_name = data["repo_name"]
        username = data["username"]

        if self._if_repo_name_exists(repo_name, username):
            LOGGER.debug("Insert repo failed due to repo name already exists.")
            return DATA_EXIST

        # mock repo attr. Will get from request in the future
        data["repo_attr"] = ""

        repo = Repo(**data)
        self.session.add(repo)
        return SUCCEED

    def _if_repo_name_exists(self, repo_name, username):
        """
        if the repo name already exists in database
        Args:
            repo_name (str): repo name
            username (str): user name

        Returns:
            bool
        """
        repo_count = self.session.query(func.count(Repo.repo_id)) \
            .filter(Repo.repo_name == repo_name, Repo.username == username).scalar()
        if repo_count:
            return True
        return False

    def update_repo(self, data):
        """
        update repo

        Args:
            data(dict): parameter, e.g.
                {
                    "username": "admin",
                    "repo_name": "20.03-update",
                    "repo_data": ""
                }

        Returns:
            int: status code
        """
        try:
            status_code = self._update_repo(data)
            self.session.commit()
            LOGGER.debug("Finished Updating repo info.")
            return status_code
        except SQLAlchemyError as error:
            self.session.rollback()
            LOGGER.error(error)
            LOGGER.error("Update repo info failed due to internal error.")
            return DATABASE_UPDATE_ERROR

    def _update_repo(self, data):
        """
        update a repo's into in database
        Args:
            data (dict): repo info

        Returns:

        """
        repo_name = data["repo_name"]
        username = data["username"]

        if not self._if_repo_name_exists(repo_name, username):
            LOGGER.debug("Update repo failed due to repo '%s' doesn't exist." % repo_name)
            return NO_DATA

        repo_data = data["repo_data"]
        # mock repo attr. Will get from request in the future
        repo_attr = ""

        repo_info = self.session.query(Repo) \
            .filter(Repo.username == username, Repo.repo_name == repo_name).one()
        repo_info.repo_data = repo_data
        repo_info.repo_attr = repo_attr

        return SUCCEED
