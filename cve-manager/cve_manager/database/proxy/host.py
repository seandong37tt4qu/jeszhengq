#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
"""
Time:
Author:
Description: Host table operation
"""
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import func

from aops_utils.log.log import LOGGER
from aops_utils.restful.status import NO_DATA, DATABASE_QUERY_ERROR, SUCCEED
from aops_utils.database.helper import sort_and_page, judge_return_code
from aops_utils.database.proxy import MysqlProxy
from aops_utils.database.table import Host
from cve_manager.database.table import Cve, CveHostAssociation, CveUserAssociation
from cve_manager.database.proxy.cve import CveEsProxy


class HostMysqlProxy(MysqlProxy):
    """
    Host related table operation
    """

    def get_host_list(self, data):
        """
        Get hosts which have cve of a specific user from table

        Args:
            data(dict): parameter, e.g.
                {
                    "sort": "last_scam",
                    "direction": "asc",
                    "page": 1,
                    "per_page": 10,
                    "username": "admin",
                    "filter": {
                        "host_name": "host1",
                        "host_group": ["group1"],
                        "repo": ["21.09"],
                        "status": ["scanning"]
                    }
                }

        Returns:
            int: status code
            dict: query result. e.g.
                {
                    "total_count": 1,
                    "total_page": 1,
                    "result": [
                        {
                            "host_id": "id1",
                            "host_name": "name1",
                            "host_ip": "1.1.1.1",
                            "host_group": "group1",
                            "repo": "20.03-update",
                            "cve_num": 12,
                            "last_scan": 1111111111
                        }
                    ]
                }
        """
        result = {}
        try:
            result = self._get_processed_host_list(data)
            self.session.commit()
            LOGGER.debug("Finished getting host list.")
            return SUCCEED, result
        except SQLAlchemyError as error:
            LOGGER.error(error)
            LOGGER.error("Getting host list failed due to internal error.")
            return DATABASE_QUERY_ERROR, result

    def _get_processed_host_list(self, data):
        """
        Get sorted and filtered host list.

        Args:
            data(dict): sort, page and filter info

        Returns:
            dict
        """
        result = {
            "total_count": 0,
            "total_page": 1,
            "result": []
        }

        filters = self._get_host_list_filters(data.get("filter"))
        host_query = self._query_host_list(data["username"], filters)

        total_count = len(host_query.all())
        if not total_count:
            return result

        sort_column = self._get_host_list_sort_column(data.get('sort'))
        direction = data.get('direction')
        page = data.get('page')
        per_page = data.get('per_page')

        processed_query, total_page = sort_and_page(host_query, sort_column,
                                                    direction, per_page, page)

        host_rows = processed_query.all()
        result['result'] = self._host_list_row2dict(host_rows)
        result['total_page'] = total_page
        result['total_count'] = total_count

        return result

    @staticmethod
    def _get_host_list_sort_column(column_name):
        """
        get column or aggregation column of table by name
        Args:
            column_name (str/None): name of column

        Returns:
            column or aggregation column of table, or None if column name is not given
        """
        if not column_name:
            return None
        if column_name == "cve_num":
            return func.count(CveHostAssociation.cve_id)
        return getattr(Host, column_name)

    def _query_host_list(self, username, filters):
        """
        query needed host info, regardless the host has cve or not
        Args:
            username (str): user name of the request
            filters (set): filter given by user

        Returns:
            sqlalchemy.orm.query.Query
        """
        host_query = self.session.query(Host.host_id, Host.host_name, Host.public_ip,
                                        Host.host_group_name, Host.repo_name, Host.last_scan,
                                        func.count(CveHostAssociation.cve_id).label("cve_num")) \
            .outerjoin(CveHostAssociation, Host.host_id == CveHostAssociation.host_id) \
            .filter(Host.user == username) \
            .filter(*filters) \
            .group_by(Host.host_id)

        return host_query

    @staticmethod
    def _host_list_row2dict(rows):
        result = []
        for row in rows:
            host_info = {
                "host_id": row.host_id,
                "host_name": row.host_name,
                "host_ip": row.public_ip,
                "host_group": row.host_group_name,
                "repo": row.repo_name,
                "cve_num": row.cve_num,
                "last_scan": row.last_scan
            }
            result.append(host_info)
        return result

    @staticmethod
    def _get_host_list_filters(filter_dict):
        """
        Generate filters

        Args:
            filter_dict(dict): filter dict to filter cve list, e.g.
                {
                    "host_name": "host1",
                    "host_group": ["group1", "group2"],
                    "repo": ["repo1"]
                }

        Returns:
            set
        """
        filters = set()
        if not filter_dict:
            return filters

        if filter_dict.get("host_name"):
            filters.add(Host.host_name.like("%" + filter_dict["host_name"] + "%"))
        if filter_dict.get("host_group"):
            filters.add(Host.host_group_name.in_(filter_dict["host_group"]))
        if filter_dict.get("repo"):
            filters.add(Host.repo_name.in_(filter_dict["repo"]))

        return filters
