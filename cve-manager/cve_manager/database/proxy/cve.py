#!/usr/bin/python3  pylint:disable=too-many-lines
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
"""
Time:
Author:
Description: Host table operation
"""
from collections import defaultdict
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import func, tuple_
from elasticsearch import ElasticsearchException

from aops_utils.log.log import LOGGER
from aops_utils.database.helper import sort_and_page, judge_return_code
from aops_utils.database.proxy import MysqlProxy, ElasticsearchProxy
from aops_utils.restful.status import DATABASE_INSERT_ERROR, DATABASE_QUERY_ERROR, NO_DATA, \
    SUCCEED, DATABASE_UPDATE_ERROR
from aops_utils.database.table import Host
from cve_manager.database.table import Cve, CveHostAssociation, CveUserAssociation, CveAffectedPkgs
from cve_manager.database.mapping import CVE_PKG_INDEX
from cve_manager.function.customize_exception import EsOperationError


class CveMysqlProxy(MysqlProxy):
    """
    Cve mysql related table operation
    """

    def get_cve_overview(self, data):
        """
        Get cve number overview based on severity

        Args:
            data(dict): parameter, e.g.
                {
                    "username": "admin",
                }

        Returns:
            int: status code
            dict: query result. e.g.
                {
                    "result": {
                        "Critical": 11,
                        "High": 6,
                        "Medium": 5,
                        "Low": 0,
                        "Unknown": 0
                    }
                }

        """
        result = {}
        try:
            result = self._get_processed_cve_overview(data)
            self.session.commit()
            LOGGER.debug("Finished getting cve overview.")
            return SUCCEED, result
        except SQLAlchemyError as error:
            LOGGER.error(error)
            LOGGER.error("Getting cve overview failed due to internal error.")
            return DATABASE_QUERY_ERROR, result

    def _get_processed_cve_overview(self, data):
        """
        get cve overview info from database
        Args:
            data (dict): e.g. {"username": "admin"}

        Returns:
            dict
        """
        result = {
            "Critical": 0,
            "High": 0,
            "Medium": 0,
            "Low": 0,
            "Unknown": 0
        }
        username = data["username"]
        cve_overview_query = self._query_cve_overview(username)

        for severity, count in cve_overview_query:
            if severity not in result:
                LOGGER.debug("Unknown cve severity '%s' when getting overview." % severity)
                continue
            result[severity] = count
        return {"result": result}

    def _query_cve_overview(self, username):
        """
        query cve overview
        Args:
            username (str): user name of the request

        Returns:
            sqlalchemy.orm.query.Query
        """
        cve_overview_query = self.session.query(Cve.severity, func.count(Cve.cve_id)) \
            .join(CveUserAssociation, Cve.cve_id == CveUserAssociation.cve_id) \
            .filter(CveUserAssociation.user_name == username) \
            .group_by(Cve.severity)

        return cve_overview_query

    def get_cve_host(self, data):
        """
        Get hosts info of a cve

        Args:
            data(dict): parameter, e.g.
                {
                    "cve_id": "cve-2021-11111",
                    "sort": "last_scan",
                    "direction": "asc",
                    "page": 1,
                    "per_page": 10,
                    "username": "admin",
                    "filter": {
                        "host_name": "",
                        "host_group": ["group1"],
                        "repo": ["20.03-update"]
                    }
                }

        Returns:
            int: status code
            dict: query result. e.g.
                {
                    "total_count": 1,
                    "total_page": 1,
                    "result": [
                        {
                            "host_id": "id1",
                            "host_name": "name1",
                            "host_ip": "1.1.1.1",
                            "host_group": "group1",
                            "repo": "20.03-update",
                            "last_scan": 1111111111
                        }
                    ]
                }
        """
        result = {}
        try:
            status_code, result = self._get_processed_cve_hosts(data)
            self.session.commit()
            LOGGER.debug("Finished getting cve hosts.")
            return status_code, result
        except SQLAlchemyError as error:
            LOGGER.error(error)
            LOGGER.error("Getting cve hosts failed due to internal error")
            return DATABASE_QUERY_ERROR, result

    def _get_processed_cve_hosts(self, data):
        """
        Query and process cve hosts data
        Args:
            data (dict): query condition

        Returns:
            int: status code
            dict
        """
        result = {
            "total_count": 0,
            "total_page": 1,
            "result": []
        }

        cve_id = data["cve_id"]
        filters = self._get_cve_hosts_filters(data.get("filter"))
        cve_hosts_query = self._query_cve_hosts(data["username"], cve_id, filters)

        total_count = len(cve_hosts_query.all())
        if not total_count:
            LOGGER.debug("No data found when getting the hosts of cve: %s." % cve_id)
            return SUCCEED, result

        sort_column = getattr(Host, data['sort']) if "sort" in data else None
        direction = data.get('direction')
        page = data.get('page')
        per_page = data.get('per_page')

        processed_query, total_page = sort_and_page(cve_hosts_query, sort_column,
                                                    direction, per_page, page)
        result['result'] = self._cve_hosts_row2dict(processed_query)
        result['total_page'] = total_page
        result['total_count'] = total_count

        return SUCCEED, result

    @staticmethod
    def _get_cve_hosts_filters(filter_dict):
        """
        Generate filters to filter cve hosts

        Args:
            filter_dict(dict): filter dict to filter cve hosts, e.g.
                {
                    "host_name": "",
                    "host_group": ["group1"],
                    "repo": ["20.03-update"]
                }

        Returns:
            set
        """
        filters = set()
        if not filter_dict:
            return filters

        if filter_dict.get("host_name"):
            filters.add(Host.host_id.like("%" + filter_dict["host_name"] + "%"))
        if filter_dict.get("host_group"):
            filters.add(Host.host_group_name.in_(filter_dict["host_group"]))
        if filter_dict.get("repo"):
            filters.add(Host.repo_name.in_(filter_dict["repo"]))

        return filters

    def _query_cve_hosts(self, username, cve_id, filters):
        """
        query needed cve hosts info
        Args:
            username (str): user name of the request
            cve_id (str): cve id
            filters (set): filter given by user

        Returns:
            sqlalchemy.orm.query.Query
        """
        cve_query = self.session.query(Host.host_id, Host.host_name, Host.public_ip,
                                       Host.host_group_name, Host.repo_name, Host.last_scan) \
            .join(CveHostAssociation, Host.host_id == CveHostAssociation.host_id) \
            .filter(Host.user == username, CveHostAssociation.cve_id == cve_id) \
            .filter(*filters)

        return cve_query

    @staticmethod
    def _cve_hosts_row2dict(rows):
        result = []
        for row in rows:
            host_info = {
                "host_id": row.host_id,
                "host_name": row.host_name,
                "host_ip": row.public_ip,
                "host_group": row.host_group_name,
                "repo": row.repo_name,
                "last_scan": row.last_scan,
            }
            result.append(host_info)
        return result

    def get_cve_task_hosts(self, data):
        """
        get hosts basic info of multiple CVE
        Args:
            data (dict): parameter, e.g.
                {
                    "cve_list": ["cve-2021-11111", "cve-2021-11112"],
                    "username": "admin"
                }

        Returns:
            int: status code
            dict: query result. e.g.
                {
                    "result": {
                        "cve-2021-11111": [
                            {
                                "host_id": "id1",
                                "host_name": "name1",
                                "host_ip": "1.1.1.1"
                            },
                            {
                                "host_id": "id2",
                                "host_name": "name2",
                                "host_ip": "1.1.1.2"
                            }
                        ],
                        "cve-2021-11112": [
                            {
                                "host_id": "id1",
                                "host_name": "name1",
                                "host_ip": "1.1.1.1"
                            }
                        ]
                    }
                }
        """
        result = {}
        try:
            status_code, result = self._get_processed_cve_task_hosts(data)
            self.session.commit()
            LOGGER.debug("Finished querying cve task hosts.")
            return status_code, result
        except SQLAlchemyError as error:
            LOGGER.error(error)
            LOGGER.error("Getting cve task hosts failed due to internal error.")
            return DATABASE_QUERY_ERROR, result

    def _get_processed_cve_task_hosts(self, data):
        """
        Query and process cve task hosts data
        Args:
            data (dict): query condition

        Returns:
            int: status code
            dict
        """
        cve_list = data["cve_list"]
        username = data["username"]
        cve_task_hosts = self._query_cve_task_hosts(username, cve_list)

        result = defaultdict(list)
        for row in cve_task_hosts:
            host_dict = self._cve_task_hosts_row2dict(row)
            result[row.cve_id].append(host_dict)

        succeed_list = list(result.keys())
        fail_list = list(set(cve_list) - set(succeed_list))

        if fail_list:
            LOGGER.debug("No data found when getting the task hosts of cve: %s." % fail_list)

        status_dict = {"succeed_list": succeed_list, "fail_list": fail_list}
        status_code = judge_return_code(status_dict, NO_DATA)
        return status_code, {"result": dict(result)}

    def _query_cve_task_hosts(self, username, cve_list):
        """
        query needed cve hosts basic info
        Args:
            username (str): user name of the request
            cve_list (list): cve id list

        Returns:
            sqlalchemy.orm.query.Query
        """
        cve_query = self.session.query(CveHostAssociation.cve_id, Host.host_id,
                                       Host.host_name, Host.public_ip) \
            .join(CveHostAssociation, Host.host_id == CveHostAssociation.host_id) \
            .filter(Host.user == username, CveHostAssociation.cve_id.in_(cve_list))
        return cve_query

    @staticmethod
    def _cve_task_hosts_row2dict(row):
        host_info = {
            "host_id": row.host_id,
            "host_name": row.host_name,
            "host_ip": row.public_ip
        }
        return host_info

    def set_cve_status(self, data):
        """
        Set cve status
        Notice, if a cve id doesn't exist, all cve will not be updated
        Args:
            data (dict): parameter, e.g.
                {
                    "cve_list": ["cve-2021-11111", "cve-2021-11112"],
                    "status": "on-hold",
                    "username": "admin"
                }

        Returns:
            int: status code
        """
        try:
            status_code = self._update_cve_status(data)
            self.session.commit()
            LOGGER.debug("Finished updating cve status.")
            return status_code
        except SQLAlchemyError as error:
            self.session.rollback()
            LOGGER.error(error)
            LOGGER.error("Updating cve status failed due to internal error")
            return DATABASE_UPDATE_ERROR

    def _update_cve_status(self, data):
        """
        Update cve status.
        Args:
            data (dict): parameter, e.g.
                {
                    "cve_list": ["xxx-xxxx-xxxx", "xxx-xxxx-xxx"],
                    "status": "on-hold",
                    "username": "admin"
                }

        Returns:
            int
        """
        cve_list = data["cve_list"]
        status = data["status"]
        username = data["username"]

        cve_status_query = self._query_cve_status(username, cve_list)
        succeed_list = [row.cve_id for row in cve_status_query]
        fail_list = list(set(cve_list) - set(succeed_list))
        if fail_list:
            LOGGER.debug("No data found when setting the status of cve: %s." % fail_list)
            return NO_DATA

        # update() is not applicable to 'in_' method without synchronize_session=False
        cve_status_query.update({CveUserAssociation.status: status}, synchronize_session=False)
        return SUCCEED

    def _query_cve_status(self, username, cve_list):
        """
        query needed cve status of specific user
        Args:
            username (str): user name of the request
            cve_list (list): cve id list

        Returns:
            sqlalchemy.orm.query.Query
        """
        cve_query = self.session.query(CveUserAssociation) \
            .filter(CveUserAssociation.user_name == username,
                    CveUserAssociation.cve_id.in_(cve_list))
        return cve_query

    def get_cve_action(self, data):
        """
        query cve action
        Args:
            data (dict): parameter, e.g.
                {
                    "cve_list": ["cve-2021-11111", "cve-2021-11112"]
                }

        Returns:
            int: status code
            dict: query result. e.g.
                {
                    "result": {
                        "cve-2021-11111": {
                            "reboot": True,
                            "package": "redis"
                        },
                        "cve-2021-11112": {
                            "reboot": False,
                            "package": "tensorflow"
                        },
                    }
                }
        """
        result = {}
        try:
            status_code, result = self._get_processed_cve_action(data)
            self.session.commit()
            LOGGER.debug("Finished querying cve action.")
            return status_code, result
        except SQLAlchemyError as error:
            LOGGER.error(error)
            LOGGER.error("Getting cve action failed due to internal error.")
            return DATABASE_INSERT_ERROR, result

    def _get_processed_cve_action(self, data):
        """
        Query and process cve action data
        Args:
            data (dict): cve list info

        Returns:
            int: status code of operation
            dict
        """
        cve_list = data["cve_list"]
        result = {}

        cve_action_query = self._query_cve_action(cve_list)

        for row in cve_action_query:
            if row.cve_id not in result:
                result[row.cve_id] = {"reboot": row.reboot, "package": row.package}
            else:
                result[row.cve_id]["package"] += "," + row.package

        succeed_list = [row.cve_id for row in cve_action_query]
        fail_list = list(set(cve_list) - set(succeed_list))
        if fail_list:
            LOGGER.debug("No data found when getting the action of cve: %s." % fail_list)

        status_dict = {"succeed_list": succeed_list, "fail_list": fail_list}
        status_code = judge_return_code(status_dict, NO_DATA)
        return status_code, {"result": result}

    def _query_cve_action(self, cve_list):
        """
        query cve action info from database
        Args:
            cve_list (list): cve id list

        Returns:
            sqlalchemy.orm.query.Query

        """
        cve_action_query = self.session.query(Cve.cve_id, CveAffectedPkgs.package, Cve.reboot) \
            .join(CveAffectedPkgs) \
            .filter(Cve.cve_id.in_(cve_list))
        return cve_action_query


class CveEsProxy(ElasticsearchProxy):  # pylint:disable=too-few-public-methods
    """
    Cve elasticsearch database related operation
    """

    def _get_cve_description(self, cve_list):
        """
        description of the cve in list
        Args:
            cve_list (list): cve id list

        Returns:
            dict: cve description dict. e.g.
                {"cve_id1": "a long description"}
        Raises:
            EsOperationError
        """
        query_body = self._general_body()

        query_body['query']['bool']['must'].append(
            {"terms": {"cve_id": cve_list}})
        operation_code, res = self.query(CVE_PKG_INDEX, query_body,
                                         source=["cve_id", "description"])

        if not operation_code:
            raise EsOperationError("Query cve description in elasticsearch failed.")

        description_dict = {}
        for hit in res["hits"]["hits"]:
            cve_id = hit["_source"]["cve_id"]
            description_dict[cve_id] = hit["_source"]["description"]
        return description_dict


class CveProxy(CveMysqlProxy, CveEsProxy):
    """
    Cve related database operation
    """

    def __init__(self, configuration, host=None, port=None):
        """
        Instance initialization

        Args:
            configuration (Config)
            host(str)
            port(int)
        """
        CveMysqlProxy.__init__(self)
        CveEsProxy.__init__(self, configuration, host, port)

    def connect(self, session):
        """ connect database"""
        return CveMysqlProxy.connect(self, session) and ElasticsearchProxy.connect(self)

    def close(self):
        """ close connection """
        CveMysqlProxy.close(self)
        ElasticsearchProxy.close(self)

    def __del__(self):
        CveMysqlProxy.__del__(self)
        ElasticsearchProxy.__del__(self)
