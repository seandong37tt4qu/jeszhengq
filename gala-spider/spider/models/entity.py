# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from spider.models import Anomaly
from spider.models.base_model_ import Model
from spider.models.dependenceitem import Dependenceitem
from spider.models.attr import Attr
from spider import util


class Entity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, entityid: str=None, type: str=None, name: str=None, level: str=None,
                 dependingitems: List[Dependenceitem]=None, dependeditems: List[Dependenceitem]=None,
                 attrs: List[Attr]=None, anomaly: Anomaly=None):  # noqa: E501
        """Entity - a model defined in Swagger

        :param entityid: The entityid of this Entity.  # noqa: E501
        :type entityid: str
        :param type: The type of this Entity.  # noqa: E501
        :type type: str
        :param name: The name of this Entity.  # noqa: E501
        :type name: str
        :param level: The level of this Entity.  # noqa: E501
        :type level: str
        :param dependingitems: The dependingitems of this Entity.  # noqa: E501
        :type dependingitems: List[Dependenceitem]
        :param dependeditems: The dependeditems of this Entity.  # noqa: E501
        :type dependeditems: List[Dependenceitem]
        :param attrs: The attrs of this Entity.  # noqa: E501
        :type attrs: List[Attr]
        :param anomaly: The anomaly of this Entity.  # noqa: E501
        :type anomaly: Anomaly
        """
        self.swagger_types = {
            'entityid': str,
            'type': str,
            'name': str,
            'level': str,
            'dependingitems': List[Dependenceitem],
            'dependeditems': List[Dependenceitem],
            'attrs': List[Attr],
            'anomaly': Anomaly
        }

        self.attribute_map = {
            'entityid': 'entityid',
            'type': 'type',
            'name': 'name',
            'level': 'level',
            'dependingitems': 'dependingitems',
            'dependeditems': 'dependeditems',
            'attrs': 'attrs',
            'anomaly': 'anomaly'
        }

        self._entityid = entityid
        self._type = type
        self._name = name
        self._level = level
        self._dependingitems = dependingitems
        self._dependeditems = dependeditems
        self._attrs = attrs
        self._anomaly = anomaly

    @classmethod
    def from_dict(cls, dikt) -> 'Entity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Entity of this Entity.  # noqa: E501
        :rtype: Entity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entityid(self) -> str:
        """Gets the entityid of this Entity.


        :return: The entityid of this Entity.
        :rtype: str
        """
        return self._entityid

    @entityid.setter
    def entityid(self, entityid: str):
        """Sets the entityid of this Entity.


        :param entityid: The entityid of this Entity.
        :type entityid: str
        """

        self._entityid = entityid

    @property
    def type(self) -> str:
        """Gets the type of this Entity.


        :return: The type of this Entity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Entity.


        :param type: The type of this Entity.
        :type type: str
        """
        allowed_values = ["host", "container", "task", "endpoint", "tcp_link", "ipvs_link", "ngnix_link", "haproxy_link"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self) -> str:
        """Gets the name of this Entity.


        :return: The name of this Entity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Entity.


        :param name: The name of this Entity.
        :type name: str
        """

        self._name = name

    @property
    def level(self) -> str:
        """Gets the level of this Entity.


        :return: The level of this Entity.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level: str):
        """Sets the level of this Entity.


        :param level: The level of this Entity.
        :type level: str
        """
        allowed_values = ["HOST", "CONTAINER", "RUNTIME", "PROCESS", "RPC", "LB", "MB"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def dependingitems(self) -> List[Dependenceitem]:
        """Gets the dependingitems of this Entity.


        :return: The dependingitems of this Entity.
        :rtype: List[Dependenceitem]
        """
        return self._dependingitems

    @dependingitems.setter
    def dependingitems(self, dependingitems: List[Dependenceitem]):
        """Sets the dependingitems of this Entity.


        :param dependingitems: The dependingitems of this Entity.
        :type dependingitems: List[Dependenceitem]
        """

        self._dependingitems = dependingitems

    @property
    def dependeditems(self) -> List[Dependenceitem]:
        """Gets the dependeditems of this Entity.


        :return: The dependeditems of this Entity.
        :rtype: List[Dependenceitem]
        """
        return self._dependeditems

    @dependeditems.setter
    def dependeditems(self, dependeditems: List[Dependenceitem]):
        """Sets the dependeditems of this Entity.


        :param dependeditems: The dependeditems of this Entity.
        :type dependeditems: List[Dependenceitem]
        """

        self._dependeditems = dependeditems

    @property
    def attrs(self) -> List[Attr]:
        """Gets the attrs of this Entity.


        :return: The attrs of this Entity.
        :rtype: List[Attr]
        """
        return self._attrs

    @attrs.setter
    def attrs(self, attrs: List[Attr]):
        """Sets the attrs of this Entity.


        :param attrs: The attrs of this Entity.
        :type attrs: List[Attr]
        """

        self._attrs = attrs

    @property
    def anomaly(self) -> Anomaly:
        """Gets the anomaly of this Entity.


        :return: The anomaly of this Entity.
        :rtype: Anomaly
        """
        return self._anomaly

    @anomaly.setter
    def anomaly(self, anomaly: Anomaly):
        """Sets the anomaly of this Entity.


        :param anomaly: The anomaly of this Entity.
        :type anomaly: Anomaly
        """

        self._anomaly = anomaly
