---
swagger: "2.0"
info:
  description: "A"
  version: "1.0"
  title: "Configuration traceability"
tags:
- name: "domain"
  description: "configuration domain"
- name: "host"
  description: "host in domain"
- name: "management"
  description: "management configuration"
- name: "confs"
  description: "query the configuration"
paths:
  /domain/createDomain:
    post:
      tags:
      - "domain"
      summary: "create domain"
      description: "create domain"
      operationId: "create_domain"
      parameters:
      - in: "body"
        name: "body"
        description: "domain info"
        required: false
        schema:
          type: "array"
          items:
            $ref: "#/definitions/Domain"
      responses:
        "200":
          description: "create domain successfully"
          schema:
            $ref: "#/definitions/BaseResponse"
        "400":
          description: "the specified domainName is invalid"
        "500":
          description: "domain already exists"
      x-swagger-router-controller: "swagger_server.controllers.domain_controller"
  /domain/deleteDomain:
    delete:
      tags:
      - "domain"
      summary: "delete domain"
      description: "delete domain"
      operationId: "delete_domain"
      parameters:
      - name: "domainName"
        in: "query"
        description: "the domain that needs to be deleted"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "delete domain successfully"
          schema:
            $ref: "#/definitions/BaseResponse"
      x-swagger-router-controller: "swagger_server.controllers.domain_controller"
  /host/addHost:
    post:
      tags:
      - "host"
      summary: "add host in the configuration domain"
      description: "add host in the configuration domain"
      operationId: "add_host_in_domain"
      parameters:
      - in: "body"
        name: "body"
        description: "domain info"
        required: false
        schema:
          $ref: "#/definitions/HostInfos"
      responses:
        "200":
          description: "add host successfully in domain"
          schema:
            $ref: "#/definitions/BaseResponse"
      x-swagger-router-controller: "swagger_server.controllers.host_controller"
  /host/getHost:
    get:
      tags:
      - "host"
      summary: "get host by domainName"
      description: "get the host information of the configuration domain"
      operationId: "get_host_by_domain_name"
      parameters:
      - in: "body"
        name: "body"
        description: "domain info"
        required: false
        schema:
          $ref: "#/definitions/DomainName"
      responses:
        "200":
          description: "get host successfully in domain"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Host"
      x-swagger-router-controller: "swagger_server.controllers.host_controller"
  /host/deleteHost:
    delete:
      tags:
      - "host"
      summary: "delete host in the configuration  domain"
      description: "delete the host in the configuration domain"
      operationId: "delete_host_in_domain"
      parameters:
      - in: "body"
        name: "body"
        description: "domain info"
        required: false
        schema:
          $ref: "#/definitions/HostInfos"
      responses:
        "200":
          description: "delete host successfully in domain"
          schema:
            $ref: "#/definitions/BaseResponse"
      x-swagger-router-controller: "swagger_server.controllers.host_controller"
  /management/addManagementConf:
    post:
      tags:
      - "management"
      summary: "add management configuration items and expected values in the domain"
      description: "add management configuration items and expected values in the\
        \ domain"
      operationId: "add_management_confs_in_domain"
      parameters:
      - in: "body"
        name: "body"
        description: "domain info"
        required: false
        schema:
          $ref: "#/definitions/Confs"
      responses:
        "200":
          description: "add management configuration items successfully in domain"
          schema:
            $ref: "#/definitions/BaseResponse"
      x-swagger-router-controller: "swagger_server.controllers.management_controller"
  /management/getManagementConf:
    get:
      tags:
      - "management"
      summary: "get management configuration items and expected values in the domain"
      description: "get management configuration items and expected values in the\
        \ domain"
      operationId: "get_management_confs_in_domain"
      parameters:
      - in: "body"
        name: "body"
        description: "domain info"
        required: false
        schema:
          $ref: "#/definitions/DomainName"
      responses:
        "200":
          description: "get management configuration items successfully in domain"
          schema:
            $ref: "#/definitions/Confs"
      x-swagger-router-controller: "swagger_server.controllers.management_controller"
  /management/deleteManagementConf:
    delete:
      tags:
      - "management"
      summary: "delete management configuration items and expected values in the domain"
      description: "delete management configuration items and expected values in the\
        \ domain"
      operationId: "delete_management_confs_in_domain"
      parameters:
      - in: "body"
        name: "body"
        description: "domain info"
        required: false
        schema:
          $ref: "#/definitions/Confs"
      responses:
        "200":
          description: "delete management configuration items successfully in domain"
          schema:
            $ref: "#/definitions/BaseResponse"
      x-swagger-router-controller: "swagger_server.controllers.management_controller"
  /confs/queryRealConfs:
    get:
      tags:
      - "confs"
      summary: "query the real configuration value in the current hostId node"
      description: "query the real configuration value in the current hostId node"
      operationId: "query_real_confs"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ConfHost"
      responses:
        "200":
          description: "query total modules successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RealConfInfo"
      x-swagger-router-controller: "swagger_server.controllers.confs_controller"
  /confs/queryExpectedConfs:
    get:
      tags:
      - "confs"
      summary: "query expected configuration value in the current hostId node"
      description: "queryExpectedConfs"
      operationId: "query_excepted_confs"
      parameters:
      - name: "range"
        in: "query"
        description: "the range of configuration"
        required: true
        type: "string"
        enum:
        - "all"
      responses:
        "200":
          description: "query expected configuration value successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ExceptedConfInfo"
        "404":
          description: "path does not exist"
      x-swagger-router-controller: "swagger_server.controllers.confs_controller"
  /confs/syncConf:
    put:
      tags:
      - "confs"
      summary: "synchronize the configuration information of the configuration domain\
        \ to the host"
      description: "synchronize the configuration information of the configuration\
        \ domain to the host"
      operationId: "sync_conf_to_host_from_domain"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/ConfHost"
      responses:
        "200":
          description: "synchronize the configuration items successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/HostSyncResult"
      x-swagger-router-controller: "swagger_server.controllers.confs_controller"
  /confs/getDomainStatus:
    get:
      tags:
      - "confs"
      summary: "get the status of the domain"
      description: "get the status of whether the domain has been synchronized"
      operationId: "get_the_sync_status_of_domain"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/DomainName"
      responses:
        "200":
          description: "get the status of the domain successfully"
          schema:
            $ref: "#/definitions/SyncStatus"
      x-swagger-router-controller: "swagger_server.controllers.confs_controller"
definitions:
  Domain:
    type: "object"
    properties:
      domainName:
        type: "string"
        description: "domain name"
      priority:
        type: "integer"
        format: "int32"
        description: "Priority of the current domain"
  DomainName:
    type: "object"
    properties:
      domainName:
        type: "string"
        description: "domain name"
  HostInfos:
    type: "object"
    properties:
      domainName:
        type: "string"
        description: "domain name"
      hostInfos:
        type: "array"
        items:
          $ref: "#/definitions/Host"
  Host:
    type: "object"
    required:
    - "hostId"
    properties:
      hostId:
        type: "string"
        description: "the id of host"
      ip:
        type: "string"
        description: "the ipv4 address of host"
      ipv6:
        type: "string"
        description: "the ipv6 address of host"
    example:
      ipv6: "ipv6"
      ip: "ip"
      hostId: "hostId"
  Confs:
    type: "object"
    properties:
      domainName:
        type: "string"
      confFiles:
        type: "array"
        items:
          $ref: "#/definitions/Conf"
  Conf:
    type: "object"
    properties:
      filePath: 
        type: "string"
        description: "the path of a configuration file"
      contents: 
        type: "string"
        description: "the contents of the configuration file"
  ConfHost:
    type: "object"
    properties:
      domainName:
        type: "string"
        description: "domain name"
      hostIds:
        type: "array"
        items:
          type: "object"
          properties:
            hostId:
              type: "string"
              description: "the id of host"
  RealConfInfo:
    type: "object"
    properties:
      domainName:
        type: "string"
      hostID:
        type: "string"
      confBaseInfos:
        type: "array"
        items:
          $ref: "#/definitions/RealconfBaseInfo"
    example:
      domainName: "domainName"
      hostID: "hostID"
      confBaseInfos:
      - rpmName: "rpmName"
        path: "path"
        filePath: "filePath"
        spacer: "spacer"
        rpmVersion: "rpmVersion"
        rpmRelease: "rpmRelease"
        fileOwner: "fileOwner"
        confType: "key-value"
        confContents: "confContents"
        fileAttr: "fileAttr"
  RealconfBaseInfo:
    type: "object"
    properties:
      path:
        type: "string"
        description: "The currently configured xpath path"
      filePath:
        type: "string"
        description: "The real file path of the configuration item in OS"
      rpmName:
        type: "string"
      rpmVersion:
        type: "string"
      rpmRelease:
        type: "string"
      fileAttr:
        type: "string"
        description: "the attributes for the real file of the configuration item in\
          \ OS"
      fileOwner:
        type: "string"
        description: "the owner information for the real file of the configuration\
          \ item in OS"
      confType:
        type: "string"
        description: "the configuration type"
        enum:
        - "key-value"
        - "toml"
        - "json"
        - "xml"
        - "text"
      spacer:
        type: "string"
        description: "spacers of configuration items in the configuration file"
      confContents:
        type: "string"
        description: "the specific content of the configuration item"
    example:
      rpmName: "rpmName"
      path: "path"
      filePath: "filePath"
      spacer: "spacer"
      rpmVersion: "rpmVersion"
      rpmRelease: "rpmRelease"
      fileOwner: "fileOwner"
      confType: "key-value"
      confContents: "confContents"
      fileAttr: "fileAttr"
  ExceptedConfInfo:
    type: "object"
    properties:
      domainName:
        type: "string"
      confBaseInfos:
        type: "array"
        items:
          $ref: "#/definitions/ConfBaseInfo"
  ConfBaseInfo:
    type: "object"
    properties:
      filePath:
        type: "string"
        description: "the path of a configuration file"
      expectedContents:
        type: "string"
        description: "expected configuration value of configuration item"
      changeLog:
        type: "array"
        items:
          $ref: "#/definitions/GitLogMessage"
  GitLogMessage:
    type: "object"
    properties:
      date:
        type: "string"
        format: "date-time"
      author:
        type: "string"
      changeId:
        type: "string"
      changeReason:
        type: "string"
      preValue:
        type: "string"
      postValue:
        type: "string"
    example:
      date: "2000-01-23T04:56:07.000+00:00"
      preValue: "preValue"
      changeReason: "changeReason"
      author: "author"
      postValue: "postValue"
      changeId: "changeId"
  BaseResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      msg:
        type: "string"
        description: "the response of the restfulApi"
    example:
      msg: "msg"
      code: 0
  SyncStatus:
    type: "object"
    properties:
      domainName:
        type: "string"
        description: "domain name"
      hostStatus:
        type: "array"
        items:
          $ref: "#/definitions/HostSyncStatus"
  HostSyncStatus:
    type: "object"
    properties:
      hostId:
        type: "string"
        description: "the id of host"
      syncStatus:
        type: "array"
        items:
          $ref: "#/definitions/ConfIsSynced"
  ConfIsSynced:
    type: "object"
    properties:
      filePath:
        type: "string"
      isSynced:
        type: "string"
        enum:
        - "NOT FOUND"
        - "NOT SYNCHRONIZE"
        - "SYNCHRONIZED"
  HostSyncResult:
    type: "object"
    properties:
      hostId:
        type: "string"
        description: "the id of host"
      syncStatus:
        type: "string"
        description: "the result of host"
        enum:
        - "SUCCESS"
        - "FILED"